# -*- coding: utf-8 -*-
"""SilkySky.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1I9o7beB_UUF1FTCzbyvVjEqGQDOgTCUF
"""

#Importing python library
import pandas as pn
import numpy as np
# Import basic library
import plotly.express as px
import seaborn as sns
import matplotlib.pyplot as plt
# Dataset pre-processing
from sklearn.preprocessing import StandardScaler, LabelEncoder
# Splitting dataset
from sklearn.model_selection import train_test_split
#Bagging classifier model
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import BaggingClassifier
#RandomForest Classifier model
from sklearn.ensemble import RandomForestClassifier
#Evaluating the relevant parameters
from sklearn.metrics import accuracy_score, log_loss, classification_report, confusion_matrix

SKY_Silky= pn.read_csv ("SILKYSKY_DATA_CW2-S-.csv", encoding="latin-1") #CSV file import
SKY_Silky.head(3)

#dataset information
SKY_Silky.info()

#Missing value identification
SKY_Silky.isnull().sum()

duplicate_values_dataset = SKY_Silky[SKY_Silky.duplicated()] #Identification of duplicate values
print("Duplicate values:") # Priniting duplicate values
duplicate_values_dataset

SKY_Silky.fillna(method ='bfill', inplace=True) #Misisng values fillup

"""Exploratory Data Analysis"""

import plotly.express as px
fig1 = px.histogram(
    SKY_Silky,
    x='Continent',
    color='Satisfied',
    barmode='group',
    title='Continent-wise Passenger Satisfaction',
    labels={'Continent': 'Continent', 'count': 'Number of Passengers'},
    color_discrete_sequence=px.colors.qualitative.Pastel
)
fig1.update_layout(
    xaxis_title='Continent',
    yaxis_title='Count',
    bargap=0.3
)

# Displaying the histogram
fig1.show()

SKY_Silky.describe() #description of the data set

fig = px.histogram(
    SKY_Silky,
    x='Online boarding',
    color='Satisfied',
    barmode='group',
    title='Rating of Online Boarding Based on Satisfaction',
    labels={'Online boarding': 'Online Boarding Rating', 'count': 'Count'},
    color_discrete_sequence=px.colors.qualitative.Pastel1
)
fig.update_layout(
    xaxis_title='Online Boarding Rating',
    yaxis_title='Count',
    legend_title='Satisfied',
    xaxis_tickangle=30,
    bargap=0.2
)
fig.update_traces(
    texttemplate='%{y}',
    textposition='outside'
)
# Showing the plot
fig.show()

fig = px.histogram(
    SKY_Silky,
    x='Satisfied',
    color='Checkin service',
    barmode='group',
    title='Check-in Services Ratings Based on Passenger Satisfaction',
    labels={'Satisfied': 'Satisfaction Rating', 'count': 'Count'},
    color_discrete_sequence=px.colors.qualitative.Set2
)
fig.update_layout(
    xaxis_title='Rating of Check-in Services',
    yaxis_title='Count',
    legend_title='Check-in Service',
    xaxis_tickangle=30,
    bargap=0.2
)
fig.update_traces(
    texttemplate='%{y}',
    textposition='outside'
)
fig.show()

#Data pre-processing
from sklearn.preprocessing import StandardScaler, LabelEncoder
label_encoder_dataset1 = {}
category_column_details1 = ['Gender', 'Satisfied', 'Age Band', 'Type of Travel', 'Class', 'Destination', 'Continent']
for column in category_column_details1:
    label_encoder_detail1 = LabelEncoder()
    SKY_Silky[column] = label_encoder_detail1.fit_transform(SKY_Silky[column])
    label_encoder_dataset1[column] = label_encoder_detail1

import plotly.graph_objects as go
correlation_matrix = SKY_Silky.corr()
fig = go.Figure(
    data=go.Heatmap(
        z=correlation_matrix.values,
        x=correlation_matrix.columns,
        y=correlation_matrix.index,
        colorscale='RdBu',
        zmin=-1,
        zmax=1,
        colorbar=dict(title='Correlation'),
        showscale=True,
        text=correlation_matrix.values,
        texttemplate="%{text:.2f}",
        hovertemplate="Correlation: %{text:.2f}<extra></extra>"
    )
)
fig.update_layout(
    title='Correlation Heatmap of SKY_Silky Dataset',
    xaxis_title='Features',
    yaxis_title='Features',
    width=800,
    height=800
)
fig.show()

#Deleting unnecessary data
X = SKY_Silky.drop(['Ref', 'id', 'Satisfied', 'Age'], axis=1)
#target column
y = SKY_Silky['Satisfied']
#Data set split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.35, random_state=42)

"""#Random forest classifier"""

from sklearn.ensemble import RandomForestClassifier
random_clf = RandomForestClassifier(n_estimators = 100)
random_clf.fit(X_train, y_train)

from sklearn.impute import SimpleImputer
imputer = SimpleImputer(strategy='mean')
X_train_imputed = imputer.fit_transform(X_train)
X_test_imputed = imputer.transform(X_test)
assert not np.any(np.isnan(X_test_imputed)), "Testing data still contains missing values"
y_pred11 = random_clf.predict(X_test_imputed)

from sklearn.metrics import accuracy_score, confusion_matrix, log_loss

accuracy_random11 = accuracy_score(y_test, y_pred11)
print(f'Accuracy: {accuracy_random11:.6f}')

print(classification_report(y_test, y_pred11))

import plotly.figure_factory as ff
from sklearn.metrics import confusion_matrix
confusion_matrix_random = confusion_matrix(y_test, y_pred11)
labels = ['Satisfied', 'Not Satisfied']
fig = ff.create_annotated_heatmap(
    z=confusion_matrix_random,
    x=labels,
    y=labels,
    colorscale='YlOrRd',
    annotation_text=confusion_matrix_random.astype(str),
    showscale=True
)
fig.update_layout(
    title='Confusion Matrix for Random Forest Classifier',
    xaxis_title='Predicted Value',
    yaxis_title='Actual Value'
)
fig.update_xaxes(side="bottom")
fig.show()

log_loss(y_test, y_pred11)

"""#Bagging Classifier Model"""

#Bagging Classifier
base_model11 = DecisionTreeClassifier()
bagging_model11 = BaggingClassifier(base_estimator=base_model11, n_estimators=10)
classifiers = bagging_model11.fit(X_train, y_train)

#Results prediction
y_pred11 = classifiers.predict(X_test)

#Accuracy calculation
accuracy11 = accuracy_score(y_test, y_pred11)
print("Accuracy- Bagging Classifier:", accuracy11)

print("Classification report-Bagging classifier model:")
print(classification_report(y_test, y_pred11))

Bagging_loss11= log_loss(y_test, y_pred11)
print(f'Log Loss value-Bagging classifier model: {Bagging_loss11:.3f}')

import plotly.graph_objects as go
from sklearn.metrics import confusion_matrix
bag_conf_matrix = confusion_matrix(y_test, y_pred11)
fig = go.Figure(
    data=go.Heatmap(
        z=bag_conf_matrix,
        x=['Predicted Negative', 'Predicted Positive'],
        y=['Actual Negative', 'Actual Positive'],
        colorscale='Blues',
        text=bag_conf_matrix,
        texttemplate='%{text}',
        hovertemplate="Count: %{text}<extra></extra>"
    )
)
fig.update_layout(
    title='Confusion Matrix - Bagging Classifier Model',
    xaxis_title='Prediction Value - Bagging Model',
    yaxis_title='Actual Value - Bagging Model',
    width=400,
    height=400,
    font=dict(size=10)
)
# Showing the heatmap
fig.show()

# Compute the correlation matrix
correlation_matrix11 = SKY_Silky.corr()

# Display the correlation matrix
print(correlation_matrix11)